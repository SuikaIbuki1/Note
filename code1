    public int sor1(String s){
        Stack<Node> stack = new Stack<>();
        //先假设所有的都可以找到匹配项
        char[] chars = s.toCharArray();
        for (int i = 0; i < chars.length; i++) {
            if(')' == chars[i] && stack.size() > 0 && '(' == stack.lastElement().c){
                stack.pop();
            }else{
                stack.add(new Node(i, chars[i]));
            }
        }
        List<Integer> list = new ArrayList<>();
        for(int i = 0; i < stack.size(); i ++){
            if(i == 0){
                if (stack.elementAt(i).i > 0) list.add(stack.elementAt(i).i);
            }
            if (i == stack.size() -1) {
                if (chars.length - stack.elementAt(i).i > 1) list.add(chars.length - stack.elementAt(i).i - 1);
            }
            if (i < stack.size() -1) {
                if (Math.abs(stack.elementAt(i).i - stack.elementAt(i + 1).i)  > 1){
                    list.add(Math.abs(stack.elementAt(i).i - stack.elementAt(i + 1).i) );
                }
            }
        }
        int max = 0;
        for(int i: list){
            if(i > max) max = i;
        }

        return max;
    }

    class Node {
        int i;
        char c;
        public Node(int i, char c) {
            this.i = i;
            this.c = c;
        }
    }

    public int sor2(int[] list, int tager){
        int left = 0;
        int right = list.length;
        int index = (left + right)/2;
        while (true){
            if (list[index] < list[index -1]) {
                break;
            }else{
                if (list[index] > list[0]) {
                    left = index;
                } else {
                    right = index;
                }
                index = (left + right)/2;
            }
        }

        if (list[index - 1] < tager || list[index] > tager) return -1;
        if (list[0] <= tager) {
            left = 0;
            right = index - 1;
        } else if (list[list.length - 1] >= tager ) {
            left = index;
            right = list.length - 1;
        }
        index = (left + right)/2;
        while (true) {
            if (list[index] == tager) {
                break;
            }else{
                if (list[index] > tager) {
                    right = index;
                    if(list[index - 1] < tager){
                        return -1;
                    }
                } else {
                    left = index;
                    if (list[index + 1] > tager) {
                        return -1;
                    }
                }
                index = (left + right)/2;
            }
        }
        return index;
    }
    
    #人工神经网络图解 https://blog.csdn.net/duduhonghong/article/details/84981732?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2.control
